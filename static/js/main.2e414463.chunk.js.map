{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","index.js"],"names":["handleIClick","event","preventDefault","alert","Navbar","className","href","aria-current","onClick","TextForm","props","isDarkMode","theme","useState","text","setText","selectedFontColour","setSelectedFontColour","selectedColourOption","setSelectedColourOption","selectedFontStyleOption","setSelectedFontStyleOption","isCopied","setIsCopied","italicChecked","boldChecked","underlineChecked","checkboxes","setCheckboxes","ColourDropdown","style","color","value","onChange","selectedValue","target","disabled","FontStyleDropdown","handleCheckboxChange","checkboxName","FontStylingCheckbox","type","checked","handleCopy","a","textcopy","document","getElementById","select","navigator","clipboard","writeText","console","log","setTimeout","marginBottom","heading","fontStyle","fontWeight","textDecorationLine","fontSize","backgroundColor","id","rows","newText","toUpperCase","toLowerCase","split","map","element","charAt","slice","join","trim","trimmedText","words","length","countWords","App","setIsDarkMode","title","marginLeft","exact","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2e414463.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst handleIClick = (event) => {\r\n  event.preventDefault();\r\n  alert(\"This is a ReactJS project!!\");\r\n};\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          My Text Styler\r\n        </a>\r\n        <li>\r\n          <a\r\n            className=\"nav-link active\"\r\n            aria-current=\"page\"\r\n            href=\"/about\"\r\n            onClick={handleIClick}\r\n          >\r\n            â“˜\r\n          </a>\r\n        </li>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const isDarkMode = props.theme;\r\n\r\n  const [text, setText] = useState(\"\");\r\n  const [selectedFontColour, setSelectedFontColour] = useState(\"Black\");\r\n  const [selectedColourOption, setSelectedColourOption] = useState(\"Black\");\r\n  const [selectedFontStyleOption, setSelectedFontStyleOption] = useState(\"Lugrasimo\");\r\n  const [isCopied, setIsCopied] = useState(false);\r\n\r\n  const [checkboxes, setCheckboxes] = useState({\r\n    italicChecked: false,\r\n    boldChecked: false,\r\n    underlineChecked: false\r\n  });\r\n\r\n  const ColourDropdown = () => {\r\n    const handleColourOptionChange = (event) => {\r\n      const selectedValue = event.target.value;\r\n      setSelectedColourOption(selectedValue);\r\n      setSelectedFontColour(selectedValue);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <p style={{ color: isDarkMode ? \"white\" : \"black\" }}>\r\n          Select colour: {selectedColourOption}\r\n        </p>\r\n        <select\r\n          value={selectedColourOption}\r\n          onChange={handleColourOptionChange}\r\n        >\r\n          <option disabled value>\r\n            --Select Font Colour--\r\n          </option>\r\n          <option value=\"Black\">Black</option>\r\n          <option value=\"Blue\">Blue</option>\r\n          <option value=\"Red\">Red</option>\r\n          <option value=\"Green\">Green</option>\r\n        </select>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const FontStyleDropdown = () => {\r\n    const handleFontStyleOptionChange = (event) => {\r\n      const selectedValue = event.target.value;\r\n      setSelectedFontStyleOption(selectedValue);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <p style={{ color: isDarkMode ? \"white\" : \"black\" }}>\r\n          Select Font Style:\r\n        </p>\r\n        <select\r\n          value={selectedFontStyleOption}\r\n          onChange={handleFontStyleOptionChange}\r\n        >\r\n          <option disabled value>\r\n            --Select Font Style--\r\n          </option>\r\n          <option value=\"Lugrasimo\" className=\"Lugrasimo\">\r\n            Lugrasimo\r\n          </option>\r\n          <option value=\"lobster\" className=\"lobster\">\r\n            Lobster\r\n          </option>\r\n          <option value=\"bungeeShade\" className=\"bungeeShade\">\r\n            Bungee Shade\r\n          </option>\r\n          <option value=\"tektur\" className=\"tektur\">\r\n            Tektur\r\n          </option>\r\n          <option value=\"anton\" className=\"anton\">\r\n            Anton\r\n          </option>\r\n          <option value=\"waitingForTheSunrise\" className=\"waitingForTheSunrise\">\r\n            Waiting for the Sunrise\r\n          </option>\r\n          <option value=\"akronim\" className=\"akronim\">\r\n            Akronim\r\n          </option>\r\n          <option value=\"tangerine\" className=\"tangerine\">\r\n            Tangerine\r\n          </option>\r\n        </select>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleCheckboxChange = (checkboxName) => {\r\n    setCheckboxes({\r\n      ...checkboxes,\r\n      [checkboxName]: !checkboxes[checkboxName]\r\n    });\r\n  };\r\n\r\n  const FontStylingCheckbox = () => {\r\n    return (\r\n      <div\r\n        className=\"checkboxStyle\"\r\n        style={{ color: isDarkMode ? \"white\" : \"black\" }}\r\n      >\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={checkboxes.italicChecked}\r\n            onChange={() => handleCheckboxChange(\"italicChecked\")}\r\n          />\r\n          Italic\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={checkboxes.boldChecked}\r\n            onChange={() => handleCheckboxChange(\"boldChecked\")}\r\n          />\r\n          Bold\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={checkboxes.underlineChecked}\r\n            onChange={() => handleCheckboxChange(\"underlineChecked\")}\r\n          />\r\n          Underline\r\n        </label>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const countWords = () => {\r\n    const trimmedText = text.trim();\r\n    const words = trimmedText.split(/\\s+/);\r\n    return trimmedText === \"\" ? 0 : words.length;\r\n  };\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    if (selectedFontStyleOption === \"bungeeShade\") {\r\n      alert(\"Lower case is not possible for selected Font Style\");\r\n      return;\r\n    }\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n\r\n  const handleCapitalizeFirst = () => {\r\n    if (selectedFontStyleOption === \"bungeeShade\") {\r\n      alert(\"Lower case is not possible for selected Font Style\");\r\n      return;\r\n    }\r\n    const lowerText = text.toLowerCase();\r\n    let words = lowerText.split(/\\s/);\r\n    const newWords = words.map((element) => {\r\n      return element.charAt(0).toUpperCase() + element.slice(1);\r\n    });\r\n    const newText = newWords.join(\" \");\r\n    setText(newText);\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    const trimmedText = text.trim();\r\n    const removedSpaceText = trimmedText.split(/\\s+/);\r\n    const newText = removedSpaceText.join(\" \");\r\n    setText(newText);\r\n  }\r\n\r\n  const handleCopy = async () => {\r\n    var textcopy = document.getElementById(\"textBox\");\r\n    textcopy.select();\r\n    navigator.clipboard.writeText(textcopy.value);\r\n    console.log(\"text copied \");\r\n\r\n    setIsCopied(true);\r\n    setTimeout(() => {\r\n      setIsCopied(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setText(\"\");\r\n    console.log(\"text cleared\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mb-3\">\r\n        <div className=\"singleRow\" style={{ marginBottom: \"25px\" }}>\r\n          <ColourDropdown />\r\n          <FontStyleDropdown />\r\n        </div>\r\n        <FontStylingCheckbox />\r\n        <h4 style={{ color: isDarkMode ? \"white\" : \"black\" }}>\r\n          {props.heading}\r\n        </h4>\r\n        <div className={selectedFontStyleOption}>\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            style={{\r\n              color: selectedFontColour,\r\n              fontStyle: checkboxes.italicChecked ? \"italic\" : \"\",\r\n              fontWeight: checkboxes.boldChecked ? \"bold\" : \"\",\r\n              textDecorationLine: checkboxes.underlineChecked ? \"underline\" : \"\",\r\n              fontSize: \"25px\",\r\n              backgroundColor: isDarkMode ? \"slategrey\" : \"whitesmoke\"\r\n            }}\r\n            onChange={handleOnChange}\r\n            id=\"textBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}>\r\n        Convert to UPPERCASE\r\n      </button>\r\n\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLowClick}>\r\n        Convert to lowercase\r\n      </button>\r\n\r\n      <button\r\n        className=\"btn btn-primary mx-2 my-2\"\r\n        onClick={handleCapitalizeFirst}\r\n      >\r\n        Convert to Title Case\r\n      </button>\r\n\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpaces}>\r\n        Remove extra spaces\r\n      </button>\r\n\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleReset}>\r\n        Reset Text\r\n      </button>\r\n\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}>\r\n        Copy Text\r\n      </button>\r\n      {isCopied && (\r\n        <span style={{ color: isDarkMode ? \"white\" : \"black\" }}>\r\n          Text Copied!\r\n        </span>\r\n      )}\r\n\r\n      <h4 style={{ color: isDarkMode ? \"white\" : \"black\" }}>\r\n        Your text summary:\r\n      </h4>\r\n      <p style={{ color: isDarkMode ? \"white\" : \"black\" }}>\r\n        No. of word(s) = {countWords()}\r\n      </p>\r\n      <p style={{ color: isDarkMode ? \"white\" : \"black\" }}>\r\n        No. of character(s) = {text.length}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  return (\n    <div style={{ backgroundColor: isDarkMode ? \"darkslategrey\" : \"lavender\" }}>\n      <Navbar title=\"My Text Styler\" />\n      <label className=\"toggle-container\">\n        <input\n          type=\"checkbox\"\n          onChange={toggleTheme}\n          className=\"toggle-input\"\n        />\n        <span className=\"toggle-slider\" />\n      </label>\n      {isDarkMode && (\n        <p style={{ marginLeft: \"20px\", color: \"white\" }}>Dark Mode is On</p>\n      )}\n      {!isDarkMode && <p style={{ marginLeft: \"20px\" }}>Light Mode is On</p>}\n      <Router>\n        <div className=\"container\">\n          <Routes>\n            <Route\n              exact\n              path=\"/\"\n              element={\n                <TextForm heading=\"Enter text here:\" theme={isDarkMode} />\n              }\n            />\n          </Routes>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}